<?phpinclude_once('CCollect.php');/* * ******************************************************************************* * Copyright(C),2013, Glory * FileName: NetAPorter.php * Author:  stephen * Version: v1.0 * Date:  14:07 2013-06-12 * Description:  NetAPorter采集类 * ******************************************************************************** */class NetAPorter extends CCollect {    const STATION = 'NETAPORTER';    const NET_A_PORTER = 'http://www.net-a-porter.com/product/';    const NET_A_PORTER_SIZECHART = 'http://www.net-a-porter.com/am/pssizechart.nap?productID=';    const HOME_URL = 'http://www.net-a-porter.com/apac/home.nap?channel=APAC&country=HK';    const COOKIE_URL = 'http://www.net-a-porter.com/apac/changecountry.nap';    private $cookie_file = '/cookie/NetAPorter.txt';    private $colorname;    private $alternativeProductArry;    //构造函数    function __construct($trace = false, $bFindAlternativeProduct = false) {        $this->cookie_file = dirname(Yii::app()->basePath)  . $this->cookie_file;        parent::__construct($trace, $bFindAlternativeProduct);    }    //销毁函数    function __destruct() {        parent::__destruct();    }    public function init() {        $this->info['unit'] = 'HKD';        $this->station = self::STATION;        $this->citys[] = '香港';        $param = 'overlay=true&redirect=&language=zh&httpsRedirect=&country=HK&channel=APAC';        $this->curl_post_cookie(self::COOKIE_URL, $this->cookie_file, $param);    }    private function getAlternativeProduct($html) {        foreach ($html->find('#alternative-colors a') as $element) {            $productid = str_replace("/product/", '', $element->href);            $this->alternativeProductArry[] = $productid;        }        if (count($this->alternativeProductArry) > 0) {            $this->info['alternative'] = implode(";", $this->alternativeProductArry);            $this->trace('关联商品:' . $this->info['alternative']);        }    }    //解析单个商品    public function productAnaly($url, $city = '') {        parent::productAnaly($url, $city);                if (!$this->getInterHtmlDom($url, $this->cookie_file)) {            $this->trace('采集失败，无法获取页面信息');            return false;        }        $this->setProductInfo();        $this->getSizeFitContainer($url);        if ($this->bFindAlternativeProduct && is_array($this->alternativeProductArry)) {            foreach ($this->alternativeProductArry as $proId) {                                try {                    $purl = self::NET_A_PORTER . $proId;                    $product = new NetAPorter($this->trace);                    $product->productAnaly($purl, $city);                    unset($product);                } catch (Exception $e) {                                    }            }        }        return $this->saveInfo();    }    //采集单页面    public function collectSinglePage($url, $city = '') {        try {            $html = $this->getHtmlDom($url, $this->cookie_file);            if($html === false) {                $this->trace('采集页内容失败！');                return true;            }            $links = $this->findProductLinks($html);            $this->trace("查找到商品数: " . strval(count($links)));            $html->clear();            unset($html);        } catch (Exception $e) {        }        $this->saveProductLinks($links);        unset($links);        return true;    }    public function collectPage($url, $city = '') {        $this->trace('此网点不允许翻页处理.');    }    //得到页数 <span class="page-numbers">第3/10页</span>    public function getPageCount($url) {        $pageCount = 0;        $reps = $this->curl_cookie_url($url);        if ($reps == false)            return $pageCount;        $html = str_get_html($reps);        if ($html == null)            return $pageCount;        $ret = $html->find('span.of');        if ($ret == null)            return $pageCount;        foreach ($ret as $key => $info) {            $this->trace('页数: ' . trim($info->plaintext));            $pageCount = trim($info->plaintext);            $pageCount = intval($pageCount);            $this->trace('搜索到页数: ' . (string) $pageCount);            return $pageCount;        }        return $pageCount;    }    //得到当前页码    private function getcurrentPageNum($url) {        $array_query = parse_url($url);        $page = 1;        try {            if (isset($array_query['query'])) {                $item = explode('=', $array_query['query']);                $page = intval($item[1]);            }        } catch (Exception $e) {                    }        return $page;    }    //搜索商品链接    private function findProductLinks($html) {        $temps = array();        $links = array();        //连接        foreach ($html->find('div[id=product-list] a') as $key=>$element) {            if($key == self::MAX_P)  break;            $productid = str_replace('/product/', '', $element->href);            $temps[] = self::NET_A_PORTER . $productid;            $this->trace('搜索到商品链接:' . self::NET_A_PORTER . $productid);        }        $links = array_unique($temps);        return $links;    }    //设置商品信息    private function setProductInfo() {        $nodes = $this->dom->find('#content');        foreach ($nodes as $html) {            $this->getpid($html);            $this->getSwatches($html);            if ($this->getSizes($html) > 0) {                $this->getAlternativeProduct($html);                $this->getBrandAndTitle($html);                $this->getOriginalRetailPrice($html);                $this->getPrice($html);                  $this->getImages($html);                $this->getDetailsAndDesigner($html);            }            break;            ;        }    }    //商品编号    private function getpid($html) {        $ret = $html->getElementById('#link');        if (empty($ret))            return;        $this->info['pid'] = $this->analyPrice($ret->value);        $this->info['id'] = self::STATION . $this->info['pid'];        $this->trace("商品ID:" . $this->info['pid']);    }    //尺寸描述    private function getSizeFitContainer($url) {             $requrl = self::NET_A_PORTER_SIZECHART . $this->info['pid'];        $dom = $this->getHtmlDom($requrl, $this->cookie_file);        if ($dom === false) {            return false;        }        try {            $ret = $dom->find('ul.content');            if (empty($ret))                return false;            foreach ($ret as $key => $info) {                $str = trim($info->outertext);                $this->info['sizeFitContainer'] = $this->filterLink($str);                       $this->trace('尺寸描述:' . $this->info['sizeFitContainer']);                return;            }        } catch (Exception $e) {                    }        $html->clear();        unset($html);    }    //品牌与标题    private function getBrandAndTitle($html) {        $ret = $html->getElementById('#product-details');        if (!empty($ret)) {            $this->info['brandName'] = trim($ret->children(0)->plaintext);            $this->trace('品牌:' . $this->info['brandName']);            $this->info['productTitle'] = trim($ret->children(1)->plaintext);            $this->trace('商品名:' . $this->info['productTitle']);        }    }    //商品名    private function getProductTitle($html) {        $ret = $html->getElementById('#productTitle');        if (empty($ret))            return;        $this->trace('商品名:' . trim($ret->plaintext));        $this->info['productTitle'] = trim($ret->plaintext);    }    //原始价格    private function getOriginalRetailPrice($html) {        $ret = $html->find('span[itemprop=minPrice]',0);        if (!empty($ret)) {            $this->info['originalRetailPrice'] = $this->analyPrice($ret->plaintext);            $this->trace('原价:' . $this->info['originalRetailPrice']);        }    }    //价格    private function getPrice($html) {        $ret = $html->find('span[itemprop=price]',0);        if (!empty($ret)) {            $this->info['price'] = $this->analyPrice($ret->plaintext);            $this->trace('现价:' . $this->info['price']);        }    }    //图片    private function getImages($html) {        $this->info['images'] = array();        $this->info['images']['0'] = array();        $ret = $html->getElementById('#thumbnails-container');        foreach ($ret->find('img') as $key => $info) {            $imgAddr = '';            $orgAddr = $info->getAttribute('src');            $imgAddr = str_replace('_xs', '_l', $orgAddr);            $imgAddr = 'http:' . $imgAddr;            //$this->trace('imgAddr:'.$this->imgAddr);            if ($this->downImage($imgAddr))                $this->info['images']['0'][] = $imgAddr;        }        $this->trace('图片:');        $this->trace($this->info['images']);    }    //颜色样本    private function getSwatches($html) {        $ret = $html->getElementById('#pr_color');        if (empty($ret))            return;        $this->info['colors'] = array();        $this->colorname = $ret->value;        $colorobj = new stdclass;        $colorobj->code = '0';        $colorobj->image = null;        $colorobj->name = $this->colorname;        $ret = $html->getElementById('#alternative-colors');        if (!empty($ret)) {            $info = $ret->find('a', 0);            $imgAddr = 'http://cache.net-a-porter.com/images/products/' . $this->info['pid'] . '/' . $this->info['pid'] . '_sw.jpg';            if ($this->downImage($imgAddr)) {                $colorobj->image = $imgAddr;            }        }        $this->info['colors'][] = $colorobj;        $this->trace('颜色:');        $this->trace($this->info['colors']);    }    private function filterBracket($stText) {        $pos = strpos($stText, '(');        if ($pos != false)            $stText = substr($stText, 0, $pos);        $pos = strpos($stText, '-');        if ($pos != false)            $stText = substr($stText, 0, $pos);        return trim($stText);    }    //尺寸 modify stephen 2013-06-08    private function getSizes($html) {        $this->info['stock'] = 0;        $this->info['sku'] = array();        $this->info['sizes'] = array();        $ret = $html->find('div[class=print-select] ul');        if (empty($ret)) {            $info = $html->find('input[class=primary-button add-to-bag]');            if (empty($info)) {                return 0;            }                        $this->info['stock'] = 5;            $sizeobj = new stdClass;            $sizeobj->name = '均码';            $sizeobj->code = '0';            $sizeobj->image = null;            $this->info['sizes'][] = $sizeobj;            $sku = new stdClass;            $sku->count = 5;            $sku->color = $this->colorname;            $sku->size = '均码';            $this->info['sku'][] = $sku;            return $this->info['stock'];        }        foreach ($html->find('#sku option') as $element) {            if ($element->value != '-1') {                $sku = new stdClass;                $sku->color = $this->colorname;                $sizeobj = new stdClass;                $sizeobj->code = $element->value;                $sizeobj->image = null;                if (strpos($element->value, "so_") === false) {                    $sku->count = 5;                } else {                    $sku->count = 0;                }                $this->info['stock'] += $sku->count;                $sku->size = $this->filterBracket($element->plaintext);                $sizeobj->name = $sku->size;                $this->info['sizes'][] = $sizeobj;                $this->info['sku'][] = $sku;            }        }        $this->trace('尺寸:');        $this->trace($this->info['sizes']);        return $this->info['stock'];    }    //说明    private function getDetailsAndDesigner($html) {        $ret = $html->find('ul[class=content]');        if (empty($ret))            return;        foreach ($ret as $key => $info) {            if ($key == 0) {                $this->info['desc'] = trim($info->plaintext);                $this->trace('商品信息:' . $this->info['desc']);            } else if ($key == 1) {                $this->info['designer'] = trim($info->plaintext);                $this->trace('尺码指导:' . $this->info['designer']);            } else if ($key == 2) {                $this->info['details'] = trim($info->plaintext);                $this->trace('产品信息:' . $this->info['details']);                return;            }        }    }}?>