<?phpinclude_once('CCollectBase.php');/* * ******************************************************************************* * Copyright(C),2013, Glory * FileName: NetAPorter.php * Author:  stephen * Version: v1.0 * Date:  14:07 2013-06-12 * Description:  NetAPorter采集类 * ******************************************************************************** */class Gebnegozionline extends CCollectBase {    const STATION = 'GEBNEGOZIONLINE';    const GEBNEGOZIONLINE = 'https://www.gebnegozionline.com';    const COOKIE_URL = 'https://www.gebnegozionline.com/index.php?';    private $cookie_file = '/cookie/Gebnegozionline.txt';    private $colorcode;    private $alternativeProductArry = array();    private $alternativeProductUrls = array();    //构造函数    function __construct($trace = false, $bFindAlternativeProduct = false) {        $this->cookie_file = dirname(Yii::app()->basePath) . $this->cookie_file;        parent::__construct($trace, $bFindAlternativeProduct);    }    //销毁函数    function __destruct() {        parent::__destruct();    }    public function init() {        $this->info['unit'] = 'HKD';        $this->station = self::STATION;        $this->citys[] = '意大利';        $url = self::COOKIE_URL.'content=changecountrydo&idStato=97&paginaProvenienza='.self::GEBNEGOZIONLINE;        $this->curl_get_cookie($url, $this->cookie_file);    }    public function findSpecificProduct($url) {        if (!$this->getInterHtmlDom($url, $this->cookie_file)) {            $this->trace('采集失败，无法获取页面信息');            return false;        }        $this->getpid();        if($this->getInfo('pid') === false) return false;                    $spcObj = pq('#page-product-link-' . $this->info['pid']);        $spcUrl = pq($spcObj)->attr('hrev');        if (isset($spcUrl{0})) {            $this->info['url'] = $spcUrl;            if (!$this->getInterHtmlDom($spcUrl, $this->cookie_file)) {                $this->trace('采集具体商品失败，无法获取页面信息');                return false;            }            return true;        }        return false;    }    //解析单个商品    public function productAnaly($url, $city = '') {        parent::productAnaly($url, $city);        if (!$this->findSpecificProduct($url)) {            if(!$this->getUpdatepid()) return false;        }        $this->setProductInfo();        $this->getSizeFitContainer($url);        $this->clear();        if ($this->bFindAlternativeProduct) {            foreach ($this->alternativeProductUrls as $prourl) {                try {                    $product = new Gebnegozionline($this->trace);                    $product->productAnaly($prourl, $city);                    $product->clear();                    $productid = $product->getId();                    if ($productid !== false) {                        $this->alternativeProductArry[] = $productid;                    }                    unset($product);                } catch (Exception $e) {                                    }            }        }        if (count($this->alternativeProductArry) > 0) {            $this->info['alternative'] = implode(";", $this->alternativeProductArry);            $this->trace('关联商品:' . $this->info['alternative']);        }        return $this->saveInfo();    }    //采集单页面    public function collectSinglePage($url, $city = '') {        try {            $html = $this->getHtmlDom($url, $this->cookie_file);            if ($html === false) {                $this->trace('采集页内容失败！');                return true;            }            $links = $this->findProductLinks($html);            $this->trace("查找到商品数: " . strval(count($links)));            $html->clear();            unset($html);        } catch (Exception $e) {                    }        $this->saveProductLinks($links);        unset($links);        return true;    }    public function collectPage($url, $city = '') {        $this->trace('此网点不允许翻页处理.');    }    //得到页数 <span class="page-numbers">第3/10页</span>    public function getPageCount($url) {        $pageCount = 0;        $reps = $this->curl_cookie_url($url);        if ($reps == false)            return $pageCount;        $html = str_get_html($reps);        if ($html == null)            return $pageCount;        $ret = $html->find('span.of');        if ($ret == null)            return $pageCount;        foreach ($ret as $key => $info) {            $this->trace('页数: ' . trim($info->plaintext));            $pageCount = trim($info->plaintext);            $pageCount = intval($pageCount);            $this->trace('搜索到页数: ' . (string) $pageCount);            return $pageCount;        }        return $pageCount;    }    //得到当前页码    private function getcurrentPageNum($url) {        $array_query = parse_url($url);        $page = 1;        try {            if (isset($array_query['query'])) {                $item = explode('=', $array_query['query']);                $page = intval($item[1]);            }        } catch (Exception $e) {                    }        return $page;    }    //搜索商品链接    private function findProductLinks($html) {        $temps = array();        $links = array();        //连接        foreach ($html->find('div[id=product-list] a') as $key => $element) {            if ($key == self::MAX_P)                break;            $productid = str_replace('/product/', '', $element->href);            $temps[] = self::NET_A_PORTER . $productid;            $this->trace('搜索到商品链接:' . self::NET_A_PORTER . $productid);        }        $links = array_unique($temps);        return $links;    }    //设置商品信息    private function setProductInfo() {        $this->getSwatches();        $this->getSizes();        $this->getSkus();        $this->getBrandAndTitle();        $this->getOriginalRetailPrice();        $this->getPrice();        $this->getImages();        $this->getDetailsAndDesigner();    }    //商品编号    private function getpid() {        $value = strrchr($this->info['url'], '/');        if($value !== false){            $this->info['pid'] = $this->analyPrice($value);            $this->info['id'] = self::STATION . $this->info['pid'];            $this->trace("商品ID:" . $this->info['pid']);        }    }         //商品编号    private function getUpdatepid() {        if (!$this->getInterHtmlDom($this->info['url'], $this->cookie_file)) {                $this->trace('采集具体商品失败，无法获取页面信息');                return false;         }                    $id = pq('.product-image');                if ($id !== null) {            $value = pq($id)->attr('id');            $this->info['pid'] = $this->analyPrice($value);            $this->info['id'] = self::STATION . $this->info['pid'];            $this->trace("商品ID:" . $this->info['pid']);            return true;        }        return false;    }        protected function isExistComma(&$value) {        $value = str_replace('.', '', $value);        $emPos = strpos($value, ' ');        if($emPos !== false){            $value = substr($value, 0, $emPos);        }        $sValue = substr($value,-3);        return strpos($sValue, ',');    }    //尺寸描述    private function getSizeFitContainer() {        $sizeFitContainer = pq('.popup_content');        if ($sizeFitContainer !== null) {            $this->info['sizeFitContainer'] = trim(pq($sizeFitContainer)->html());            $this->trace('尺寸描述:' . $this->info['sizeFitContainer']);        }    }    //品牌与标题    private function getBrandAndTitle() {        $brand = pq('.brand');        if ($brand !== null) {            $this->info['brandName'] = trim(pq($brand)->text());            $this->trace('品牌:' . $this->info['brandName']);        }        $productTitle = pq('.fn');        if ($productTitle !== null) {            $this->info['productTitle'] = trim(pq($productTitle)->text());            $this->trace('商品名:' . $this->info['productTitle']);        }    }    //原始价格    private function getOriginalRetailPrice() {        $originalRetailPrice = pq('.product-price-was');        if ($originalRetailPrice !== null) {            $sPrice = pq($originalRetailPrice)->text();            if (isset($sPrice{0})) {                $bExistComma = $this->isExistComma($sPrice);                $realPrice = $this->analyPrice($sPrice);                if($bExistComma !== false) $realPrice=$realPrice/100;                $this->info['originalRetailPrice'] = $realPrice;                $this->trace('原价:' . $this->info['originalRetailPrice']);            }        }    }    //价格    private function getPrice() {        $price = pq('.product-price-now');        if ($price !== null) {            $sPrice = pq($price)->text();            if (isset($sPrice{0})) {                $bExistComma = $this->isExistComma($sPrice);                $realPrice = $this->analyPrice($sPrice);                if($bExistComma !== false) $realPrice=$realPrice/100;                $this->info['price'] = $realPrice;                $this->trace('现价:' . $this->info['price']);            }        }    }    //图片    private function getImages() {        $this->info['images'] = array();        $this->info['images'][$this->colorcode] = array();        $images = pq('.cloud-zoom-gallery');        foreach ($images as $image) {            $imgAddr = pq($image)->attr('href');            if ($this->downImage($imgAddr))                $this->info['images'][$this->colorcode][] = $imgAddr;            else {                $this->trace('下载失败');            }        }        $this->trace('图片:');        $this->trace($this->info['images']);    }    //颜色样本    private function getSwatches() {        $this->info['colors'] = array();        $options = pq('#colors' . $this->pid)->find('option');        foreach ($options as $option) {            $selected = pq($option)->attr('selected');            if ($selected !== null) {                $code = pq($option)->attr('value');                $colorobj = new stdclass;                $colorobj->name = trim(pq($option)->text());                $colorobj->code = $code;                $colorobj->image = null;                $this->info['colors'][] = $colorobj;                $this->colorcode = $code;            } else {                $this->alternativeProductUrls[] = trim(pq($option)->attr('hrel'));            }        }        $this->trace('颜色:');        $this->trace($this->info['colors']);    }    private function filterBracket($stText) {        $pos = strpos($stText, '(');        if ($pos != false)            $stText = substr($stText, 0, $pos);        $pos = strpos($stText, '-');        if ($pos != false)            $stText = substr($stText, 0, $pos);        return trim($stText);    }    //SKU    private function getSkus() {        $this->info['sku'] = array();        foreach ($this->info['sizes'] as $size) {            foreach ($this->info['colors'] as $color) {                $sku = new stdClass;                $sku->count = 5;                $sku->color = $color->name;                $sku->size = $size->name;                $this->info['sku'][] = $sku;            }        }        $this->trace('sku:');        $this->trace($this->info['sizes']);    }    //尺寸 modify stephen 2013-06-08    private function getSizes() {        $this->info['stock'] = 0;        $this->info['sizes'] = array();        $sizes = pq('.product-option_size a');        foreach ($sizes as $size) {            $sizeobj = new stdClass;            $sizeobj->name = trim(pq($size)->text());            $sizeobj->code = trim(pq($size)->text());            $sizeobj->image = null;            $this->info['sizes'][] = $sizeobj;            $this->info['stock'] += 5;        }        $this->trace('尺寸:');        $this->trace($this->info['sizes']);    }    //说明    private function getDetailsAndDesigner() {        $desc = pq('.product-description');        if ($desc !== null) {            $this->info['desc'] = pq($desc)->text();            $this->trace('商品信息:' . $this->info['desc']);        }        $designer = pq('#product-sizefit_' . $this->info['pid']);        if ($desc !== null) {            $this->info['designer'] = pq($designer)->text();            $this->trace('尺码指导:' . $this->info['designer']);        }        $details = pq('#product-icons_' . $this->info['pid'] . ' img');        $this->info['details'] = '';        foreach ($details as $detail) {            $this->info['details'] .= pq($detail)->attr('title');            $this->info['details'] .= ' | ';        }        $this->trace('details:' . $this->info['details']);    }}?>