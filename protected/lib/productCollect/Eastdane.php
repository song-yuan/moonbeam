<?php//include('WebScrap.php');/* * ******************************************************************************* * Copyright(C),2013, Glory * FileName: Eastdane.php * Author:  stephen * Version: v2.0 * Date:  14:07 2015-03-04 * Description:  shopbop采集类 * ******************************************************************************** */class Eastdane extends WebScrap {    const SHOPHEAD = 'http://www.eastdane.com';    const SHOPSTOCK = 'http://www.eastdane.com/actions/availabilityCheck.action?';    const STATION = 'EASTDANE';        //构造函数    function __construct($bFindAlternativeProduct = false) {        parent::__construct($bFindAlternativeProduct);    }    //销毁函数    function __destruct() {        parent::__destruct();    }    public function init() {        $this->citys = array('美国'=>'USD');        $this->station = self::STATION;    }        //采集单页面    public function collectSinglePage($url, $city = '') {        $this->trace('抓取整页: ' . $url);        $links = null;        try {                if ($this->htmlParser->loadURL($url) === false) {                    $this->trace('无法取得网站数据');                    return false;                }                $links = $this->findProductLinks();                $this->trace('查找到商品数: ' . strval(count($links)));        } catch (Exception $e) {                    }        $this->saveProductLinks($links);        unset($links);                return true;    }    //得到页数    private function getPageCount($url) {        $html = getHtmlDom($url);        $ret = $html->getElementById('#searchResultCount');        if (empty($ret))            return;        $count = intval($ret->plaintext) / 40;        return intval(ceil($count));    }    //得到当前页码    private function getcurrentPageNum($url) {        $array_query = parse_url($url);        $page = 0;        try {            if (isset($array_query['query'])) {                $item = explode('=', $array_query['query']);                $page = intval($item[1] / 40);            }        } catch (Exception $e) {                    }        return $page;    }    //翻页采集    public function collectPage($url, $city = '') {    }    private function decodeProductDetailLink($content) {        if(!isset($content{0})) return false;;                $json = findSubString($content, "bop.config.filters", ";");                $json = trim($json);        $json = trim($json, "=");        $json = trim($json);        $json = trim($json, ";");        $json = '[' . $json . ']';        $json = str_replace('\"', '', $json);        $json = stripslashes($json);        $objs = json_decode($json);                $objs = json_decode($json);        if ($objs === NULL){            $this->trace('json解析失败');            return false;        }        return $objs;    }        //搜索商品链接    private function findProductLinks() {        $links = array();        $objs=$this->decodeProductDetailLink($this->htmlParser->html);        if($objs===false){                return $links;            }        /*        $items = $this->htmlParser->getTagNodes('script');        foreach ($items as $item) {            $this->trace($item);            $objs=$this->decodeProductDetailLink($item->textContent);            if($objs===false){                return $links;            }        }*/                foreach ($objs as $obj) {            foreach ($obj->products as $product) {                $links[] = $product->productDetailLink;                $this->trace('搜索到商品链接:' . self::SHOPHEAD . $product->productDetailLink);            }        }        return $links;    }    private function getTags($parentNode) {        $this->tags = array();        $this->tags[] = '男士';        $parent = $this->htmlParser->getElementByClassFromParent($parentNode,'ul','breadcrumb-list');        $parentElements = $this->htmlParser->getElementsByClassFromParent($parent,'a','underline');        foreach ($parentElements as $info) {            $this->tags[] = trim($info->getAttribute('title'));        }        $this->trace('标签：');        $this->trace($this->tags);    }    //设置商品信息    private function setProductInfo() {        $this->trace('颜色:');        $this->trace($this->colors);        $this->trace('尺寸:');        $this->trace($this->sizes);                $parentNode = $this->htmlParser->getElementById('product-information');        if($parentNode !== false){            //$brand            $brand = $this->htmlParser->getElementByClassFromParent($parentNode,'a','row');            if($brand !== false){                $this->brandName = trim($brand->textContent);                $this->trace('品牌:' . $this->brandName);            }             //$title            $title = $this->htmlParser->getElementByClassFromParent($parentNode,'span','product-title');            $this->productTitle = trim($title->textContent);            $this->trace('商品名:' . $this->productTitle);            //Price            $this->getPrice($parentNode);        }                $rightcolumn = $this->htmlParser->getElementById('right-column');        $this->getTags($rightcolumn);            $this->getDetails($rightcolumn);        $this->getDesigner($rightcolumn);        $this->getSizeFitContainer($rightcolumn);        }    private function decodeProductDetailScript($reps) {        if(!isset($reps{0})) return false;;                $json = findSubString($reps, "productDetail", ";");                if($json===false) return false;              if($this->getId($reps)===false) return false;                if($this->getListPrice($reps)===false) return false;                if($this->getSellingPrice($reps)===false) return false;                $this->isInStock($reps);                        $json = trim($json);        $json = trim($json, "=");        $json = trim($json);        $json = trim($json, ";");        $json = '[' . $json . ']';        $json = str_replace('\"', '', $json);        $json = stripslashes($json);        $objs = json_decode($json);        if ($objs === NULL){            $this->trace('json解析失败');            return false;        }        return $objs;    }    //得到JSON数据    private function getJsonData() {        $items = $this->htmlParser->getTagNodes('script');        foreach ($items as $item) {            $objs=$this->decodeProductDetailScript($item->textContent);            if($objs!==false){                return $objs;            }        }        return false;    }    //解析JSON数据    private function analyJsonData() {        $objs = $this->getJsonData();        if ($objs === false)            return false;        $this->sizes = array();        $this->colors = array();        $this->images = array();        foreach ($objs as $obj) {            foreach ($obj->sizes as $key => $size) {                $sizeobj = new stdClass;                $sizeobj->name = $key;                $sizeobj->code = $size->sizeCode;                $sizeobj->image = null;                $this->sizes[] = $sizeobj;            }            foreach ($obj->colors as $key => $color) {                $colorobj = new stdclass;                $colorobj->code = $key;                $colorobj->image = $color->swatch;                $colorobj->name = $color->colorName;                $colorobj->sizes = $color->sizes;                $this->colors[] = $colorobj;                $this->images[$key] = array();                foreach ($color->images as $image) {                    $this->images[$key][] = $image->main;                }            }        }        return true;    }    //计算库存    private function getStock() {        $this->stock = 0;        $this->sku = array();        foreach ($this->colors as $color) {            foreach ($this->sizes as $size) {                $sku = new stdClass;                $sku->size = $size->name;                $sku->color = $color->name;                if (in_array($size->code, $color->sizes)) {                    $sku->count = $this->countStock($color->code, $size->code);                } else {                    $sku->count = 0;                }                $this->stock += $sku->count;                $this->sku[] = $sku;            }        }        $this->trace('货存：' . $this->stock);    }    //解析单个商品    public function productAnaly($url, $city = '') {        if (parent::productAnaly($url, $city)===false) {            $this->trace('不支持该城市采集!');            return false;        }        if ($this->htmlParser->loadURL($url) === false) {            $this->trace('无法取得网站数据');            return false;        }        if (!$this->analyJsonData()) {            $this->trace('找不到商品JSON数据!');            return false;        }                if ($this->isInStock) {            $this->getStock();            $this->setProductInfo();            $this->saveImage();        }        return $this->save();    }    //商品编号    private function getId($reps) {        $ret = findSubString($reps, 'productPage.productCode', ';');        if ($ret!==false){            $ret = trim($ret);            $ret = trim($ret, "=");            $ret = trim($ret);            $ret = trim($ret, ";");            $ret = trim($ret, "'");            $this->pid = trim($ret);            $this->id = self::STATION . $this->pid;                        $this->trace('编号:' . $this->pid);            return true;        }        return false;    }        //商品编号    private function isInStock($reps) {        $ret = findSubString($reps, 'productPage.isInStock', ';');        if ($ret!==false){            $pos = strpos($ret, 'true');            if ($pos === false) {                $this->isInStock = false;            }else{                $this->isInStock = true;            }        }else{            $this->isInStock = false;        }                $this->trace('是否存货:' . $this->isInStock);    }        //ListPrice    private function getListPrice($reps) {        $ret = findSubString($reps, 'productPage.listPrice', ';');        if ($ret!==false){            $this->listPrice = analyPrice($ret);        }else{            return false;        }                $this->trace('原价:' . $this->listPrice);        return true;    }        //sellingPrice    private function getSellingPrice($reps) {        $ret = findSubString($reps, 'productPage.sellingPrice', ';');        if ($ret!==false){            $this->sellingPrice = analyPrice($ret);        }else{            return false;        }                $this->trace('销售价:' . $this->sellingPrice);        return true;    }    //尺寸描述    private function getSizeFitContainer($rightcolumn) {        $sizeFitContainer = $this->htmlParser->getElementByIdFromParent($rightcolumn,'div','sizeFitContainer');        if($sizeFitContainer!==false){                $this->sizeFitContainer = trimLink($this->htmlParser->innerXML($sizeFitContainer));                $this->trace('尺寸描述:' . $this->sizeFitContainer);        }    }     private function setSku($color, $price) {        $colors = explode("、", $color);        $find = false;        if (is_array($this->sku)) {            foreach ($this->sku as $obj) {                if (is_object($obj) && in_array($obj->color, $colors)) {                    $obj->price = $price;                    $find = true;                }            }        }        //$this->trace($this->info['sku']);        return $find;    }    //原始价格    private function getPrice($parentNode) {        $parentElement = $this->htmlParser->getElementByIdFromParent($parentNode,'div','productPrices');                foreach ($this->htmlParser->getElementsByClassFromParent($parentElement,'div','priceBlock') as $info) {                        $el = $this->htmlParser->getElementByMutilClassFromParent($info,'span','regularPrice','salePrice');            if ($el !== false) {                //原价                $price = analyPrice(trim($el->textContent));                $colors = $this->htmlParser->getElementByClassFromParent($info,'span','priceColors');                if($colors!==false){                    $this->trace($colors->textContent);                    $this->setSku(trim($colors->textContent), $price);                }                if($price > $this->listPrice) $this->listPrice = $price;            }        }        $this->trace('sku:');        $this->trace($this->sku);    }    private function saveImage() {        if ($this->colors) {            foreach ($this->colors as $color) {                if (isset($color->image)) {                    $this->downImage($color->image);                }            }        }        if ($this->images) {            foreach ($this->images as $images) {                foreach ($images as $image) {                    $this->downImage($image);                }            }        }    }    //计算库存    public function countStock($swatchesCode, $sizesCode) {        $url = self::SHOPSTOCK . 'product=' . $this->pid . '&size=' . $sizesCode . '&color=' . $swatchesCode;        $this->trace('货存实时查询：' . $url);        $stock = 0;        $respObject = getJosn($url);        if (!$respObject)            return $stock;        if ($respObject->result == 'success') {            if (isset($respObject->responseData->available) &&                    ($respObject->responseData->available != null || $respObject->responseData->available != 'null')) {                $stock = intval($respObject->responseData->available);            } else {                $stock = 5;            }        } else {            $stock = 0;        }        return $stock;    }    //说明    private function getDetails($rightcolumn) {        $detailsAccordion = $this->htmlParser->getElementByIdFromParent($rightcolumn,'div','detailsAccordion');        if($detailsAccordion!==false){            $elm = $this->htmlParser->getElementByIdFromParent($rightcolumn,'div','ui-id-2');            if($elm!==false){                $this->details = trim($elm->textContent);                $this->trace('商品描述:' . $this->details);            }        }    }    //设计师    private function getDesigner($rightcolumn) {        $designerContainer = $this->htmlParser->getElementByIdFromParent($rightcolumn,'div','designerContainer');        if($designerContainer!==false){                $this->designer = trim($designerContainer->textContent);                $this->trace('设计师:' . $this->designer);        }    }}