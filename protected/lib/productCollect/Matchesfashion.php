<?phpinclude_once('CCollect.php');/* * ******************************************************************************* * Copyright(C),2014, Glory * FileName: NetAPorter.php * Author:  stephen * Version: v1.1 * Date:  14:07 2014-10-28 * Description:  Matchesfashion采集类 * ******************************************************************************** */class Matchesfashion extends CCollect {    const STATION = 'MATCHESFASHION';    const HOME_URL = 'http://www.matchesfashion.com/settings';    const PRODUCT_URL = 'http://www.matchesfashion.com/product/';    private $cookie_file = '/cookie/Matchesfashion.txt';    //构造函数    function __construct($trace = false, $bFindAlternativeProduct = false) {        $this->cookie_file = dirname(Yii::app()->basePath) . $this->cookie_file;        parent::__construct($trace, $bFindAlternativeProduct);    }    //销毁函数    function __destruct() {        parent::__destruct();    }    public function init() {        $this->info['unit'] = 'EUR';        $this->station = self::STATION;        $this->citys[] = '英国';        $this->curl_cookie(self::HOME_URL, $this->cookie_file);        $this->curl_post_cookie(self::HOME_URL, $this->cookie_file, 'Shipping=HKG&DisplayCurrency=&Currency=EUR');    }    //解析单个商品    public function productAnaly($url, $city = '') {        parent::productAnaly($url, $city);        if (!$this->getInterHtmlDom($url, $this->cookie_file)) {            $this->trace('采集失败，无法获取页面信息');            return false;        }        $this->setProductInfo();        return $this->saveInfo();    }    //采集单页面    public function collectSinglePage($url, $city = '') {        $this->trace("采集整页: {$url}, 限制在20个商品采集");        try {            $html = $this->getHtmlDom($url);            $links = $this->findProductLinks($html);            $this->trace("查找到商品数: " . strval(count($links)));            $html->clear();            unset($html);        } catch (Exception $e) {                    }        $this->saveProductLinks($links);        unset($links);        return true;    }    //搜索商品链接    private function findProductLinks($html) {        $temps = array();        $links = array();        foreach ($html->find('div[class=product medium]') as $key => $element) {            if ($key == self::MAX_P)                break;            $addr = self::PRODUCT_URL . $element->getAttribute("data-wpc");            $temps[] = $addr;            $this->trace('搜索到商品链接:' . $addr);        }        $links = array_unique($temps);        unset($temps);        return $links;    }    public function collectPage($url, $city = '') {        $this->trace('此网点不允许翻页处理.');    }    //得到页数 <span class="page-numbers">第3/10页</span>    public function getPageCount($url) {        $pageCount = 0;        $reps = $this->curl_cookie_url($url);        if ($reps == false)            return $pageCount;        $html = str_get_html($reps);        if ($html == null)            return $pageCount;        $ret = $html->find('span.of');        if ($ret == null)            return $pageCount;        foreach ($ret as $key => $info) {            $this->trace('页数: ' . trim($info->plaintext));            $pageCount = trim($info->plaintext);            $pageCount = intval($pageCount);            $this->trace('搜索到页数: ' . (string) $pageCount);            return $pageCount;        }        return $pageCount;    }    //得到当前页码    private function getcurrentPageNum($url) {        $array_query = parse_url($url);        $page = 1;        try {            if (isset($array_query['query'])) {                $item = explode('=', $array_query['query']);                $page = intval($item[1]);            }        } catch (Exception $e) {                    }        return $page;    }    //得到商品信息    public function getProductInfo($desc) {        if (array_key_exists($desc, $this->info))            return $this->info[$desc];        return false;    }    //设置商品信息    private function setProductInfo() {        $nodes = $this->dom->find('.product-details');        foreach ($nodes as $html) {            $this->getpid($html);            $this->getSizes($html);            if ($this->info['stock'] > 0) {                $this->getBrandAndTitle($html);                $this->getSwatches();                $this->getImages($html);                $this->getDetailsAndDesigner($html);                $this->getPercentOff();            }            break;        }    }    //商品编号    private function getpid($html) {        $ret = $html->getElementById('#AddToBasketMain');        if (empty($ret)) {            $this->info['pid'] = $this->analyPrice($this->info['url']);        } else {            $this->info['pid'] = trim($ret->getAttribute('data-event-label'));        }        if (!isset($this->info['pid']{0})) {            $this->trace("找不到商品ID:");            return;        }        $this->info['id'] = self::STATION . $this->info['pid'];        $this->trace("商品ID:" . $this->info['id']);    }    //品牌与标题    private function getBrandAndTitle($html) {        foreach ($html->find('.col-2') as $fe) {            $e = $fe->find('.designer a', 0);            if ($e !== null) {                $this->info['brandName'] = trim($e->innertext);                $this->trace('品牌:' . $this->info['brandName']);            }            $e = $fe->find('.description', 0);            if ($e !== null) {                $title = trim($e->innertext, '(' . $this->id . ')');                $this->info['productTitle'] = trim($title);                $this->trace('品牌:' . $this->info['productTitle']);            }            $info = $fe->find('.info', 0);            $e = $info->find('.full', 0);            if ($e !== null) {                $this->info['originalPrice'] = $this->analyPrice($e->innertext);                $this->trace('原价:' . $this->info['originalPrice']);                $e = $info->find('.sale', 0);                if ($e !== null) {                    $this->info['price'] = $this->analyPrice($e->innertext);                    $this->trace('现价:' . $this->info['price']);                    $this->getPercentOff();                }            } else {                $e = $info->find('.price', 0);                if ($e !== null) {                    $this->info['price'] = $this->analyPrice($e->innertext);                    $this->trace('现价:' . $this->info['price']);                }            }            break;        }    }    //打折    private function getPercentOff() {        $originalRetailPrice = $this->getInfo('originalRetailPrice');        $price = $this->getInfo('price');        if ($originalRetailPrice && $price) {            $this->info['percentOff'] = intval($price / $originalRetailPrice * 10);            $this->trace('打折: ' . (string) $this->info['percentOff']);        }    }    //商品名    private function getProductTitle($html) {        $ret = $html->getElementById('#productTitle');        if (empty($ret))            return;        $this->trace('商品名:' . trim($ret->plaintext));        $this->info['productTitle'] = trim($ret->plaintext);    }    //图片    private function getImages($html) {        $this->info['images'] = array();        $this->info['images']['0'] = array();        foreach ($html->find('.image-list a img') as $info) {            $imgAddr = $info->getAttribute('src');            if ($this->downImage($imgAddr))                $this->info['images']['0'][] = $imgAddr;        }        if (is_array($this->info['images']['0'])) {            sort($this->info['images']['0']);        }        $this->trace('图片:');        $this->trace($this->info['images']);    }    //颜色样本    private function getSwatches() {        $this->info['colors'] = array();        $colorobj = new stdclass;        $colorobj->code = '0';        $colorobj->image = null;        $colorobj->name = '图片色';        $this->info['colors'][] = $colorobj;    }    private function getOrgId($id) {        $orgid = trim($id, self::SIGN);        $this->info['orgid'] = $orgid;        return $orgid;    }    //尺寸 modify stephen 2013-06-08    private function getSizes($html) {        $this->info['stock'] = 0;        $this->info['sku'] = array();        $this->info['sizes'] = array();        foreach ($html->find('div.sizes select') as $element) {            foreach ($element->find('option') as $option) {                if (isset($option->value{0})) {                    $sku = new stdClass;                    $sku->color = '图片色';                    if ($option->hasAttribute('data-soldout')) {                        $sku->count = 0;                        $sku->size = trim(str_replace('- Sold Out', '', $option->innertext));                    } else {                        $sku->count = 5;                        $sku->size = trim($option->innertext);                    }                    $sizeobj = new stdClass;                    $sizeobj->name = $sku->size;                    $sizeobj->code = '0';                    $sizeobj->image = null;                    $this->info['sizes'][] = $sizeobj;                    $this->info['stock'] += $sku->count;                    $this->info['sku'][] = $sku;                }            }            break;        }        $this->trace('货存查询：' . $this->info['stock']);    }    //说明    private function getDetailsAndDesigner($html) {        foreach ($html->find('div.v-panels') as $info) {            foreach ($html->find('div.scroll') as $key => $info)                if ($key == 0) {                    $this->info['desc'] = $this->filterLink(trim($info->innertext));                    $this->trace('商品信息:' . $this->info['desc']);                } else if ($key == 1) {                    $this->info['details'] = $this->filterLink(trim($info->innertext));                    $this->trace('产品信息:' . $this->info['details']);                } else if ($key == 2) {                    $this->info['sizeFitContainer'] = $this->filterLink(trim($info->innertext));                    $this->trace('尺码指导:' . $this->info['sizeFitContainer']);                    return;                }        }    }}